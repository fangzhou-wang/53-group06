---
title: "Geospatial Visualization Assignment"
author: "Siru Wu"
date-format: long
lang: en
theme: cosmo
toc: true
toc-title: "Table of contents"
link-citations: true
document-css: false
---

```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 设置风格
sns.set(style="whitegrid")
plt.rcParams['axes.labelsize'] = 12

# 读取数据
df = pd.read_csv("../../data/processed-data/food_sampled_cleaned.csv")

# 营养特征字段
nutri_cols = [
    'energy-kcal_100g', 'fat_100g', 'saturated-fat_100g',
    'carbohydrates_100g', 'sugars_100g', 'added-sugars_100g',
    'fiber_100g', 'proteins_100g', 'salt_100g', 'sodium_100g',
    'cholesterol_100g', 'vitamin-c_100g',
    'fruits-vegetables-nuts-estimate_100g'
]

```

## 1. NutriScore 分布
```{python}
import pandas as pd
import plotly.express as px

df = pd.read_csv("../../data/processed-data/food_sampled_cleaned.csv")

fig = px.histogram(
    df, 
    x="nutriscore_grade", 
    category_orders={"nutriscore_grade": ["a", "b", "c", "d", "e"]},
    title="NutriScore Grade Distribution",
    labels={"nutriscore_grade": "NutriScore Grade"},
    color_discrete_sequence=["skyblue"]
)
fig.update_layout(bargap=0.2)
fig.show()

```

NutriScore 等级分布图揭示了数据集中不同健康评分（从 A 到 E）的产品数量。可以观察到，评分为 E 的食品数量最多，其次依次是 D、C，而评分为 A 和 B 的样本数量明显较少。这种不均衡的分布提示后续若使用分类模型预测 NutriScore，需考虑类别不平衡问题（如使用加权损失函数、重采样等方法），否则模型可能更倾向于预测频次较高的类别。

## 2. 每个营养特征 vs NutriScore（Boxplot）
```{python}
import plotly.express as px

for col in nutri_cols:
    fig = px.box(
        df, 
        x="nutriscore_grade", 
        y=col, 
        points="all",  # 显示所有散点
        title=f"{col} by NutriScore Grade",
        color="nutriscore_grade"
    )
    fig.show()


```

## 3. 食品大类 vs NutriScore（堆叠图）
```{python}
df_grouped = df.groupby(["pnns_groups_1", "nutriscore_grade"]).size().reset_index(name="count")
df_total = df_grouped.groupby("pnns_groups_1")["count"].transform("sum")
df_grouped["proportion"] = df_grouped["count"] / df_total

fig = px.bar(
    df_grouped,
    x="proportion",
    y="pnns_groups_1",
    color="nutriscore_grade",
    orientation="h",
    title="NutriScore by Food Category (pnns_groups_1)",
    category_orders={"nutriscore_grade": ["a", "b", "c", "d", "e"]}
)
fig.update_layout(barmode="stack")
fig.show()
```

## 4. 缺失值比例热图
```{python}
nutrition_cols = [
    'energy-kcal_100g', 'fat_100g', 'saturated-fat_100g',
    'carbohydrates_100g', 'sugars_100g', 'added-sugars_100g',
    'fiber_100g', 'proteins_100g', 'salt_100g', 'sodium_100g',
    'cholesterol_100g', 'vitamin-c_100g',
    'fruits-vegetables-nuts-estimate_100g'
]

missing_percent = df[nutrition_cols].isnull().mean().sort_values(ascending=False) * 100
missing_df = missing_percent.reset_index()
missing_df.columns = ["feature", "missing_pct"]

fig = px.bar(
    missing_df, 
    x="missing_pct", 
    y="feature", 
    orientation="h",
    title="Missing Value Percentage (Nutrition Fields)",
    labels={"missing_pct": "Percentage %", "feature": "Nutrition Feature"},
    color_discrete_sequence=["salmon"]
)
fig.update_layout(yaxis={'categoryorder':'total ascending'})
fig.show()
```

## 5. 营养特征间的相关性热图
```{python}
import plotly.figure_factory as ff

corr_matrix = df[nutrition_cols].corr().round(2)

fig = ff.create_annotated_heatmap(
    z=corr_matrix.values,
    x=corr_matrix.columns.tolist(),
    y=corr_matrix.index.tolist(),
    annotation_text=corr_matrix.values.round(2),
    colorscale="RdBu",
    showscale=True,
    reversescale=True
)
fig.update_layout(title_text="Correlation Between Nutrition Features", width=1000, height=800)
fig.show()

```